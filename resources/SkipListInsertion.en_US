noSuchKeyException=Couldn't find resource with key "{0}".
iconNotFound=Icon "{0}" not found
algoDescription=The Skip List is a data structure that has similarities to a Linked List\nallowing quick searches in a sorted list.\n\nIt consists of a sequence of nodes. Each of these nodes has a specific height\nand at each height exactly one reference to a successor node. This structure\nallows nodes to be skipped, reducing the complexity of iterating across the list.\n\nFrom a global point of view, the Skip List consists of several levels, which are sparsly occupied\nwith increasing height. The insertion operation involves two operations:\n(1) Find the insertion position and (2) adjust the references between the nodes.\n\nSkip Lists were invented by William Pugh. The pseudo-code is taken from his work.\nPugh, W. (1990). quot;Skip lists: A probabilistic alternative to balanced treesquot;.\nCommunications of the ACM. 33 (6): 668\u2013676. doi:10.1145/78973.78977.
algoName=Skip List Insertion
name=Skip List Insertion
probabilityAllowedValues=Only values between 0 and 1 are allowed for probability.
invalidInput=Invalid input
headerText=SkipList Insertion
introduction=Introduction
elementToBeInserted=<-- Element to be inserted.
insertActionName=Insert({0})
currentHeight=Current height: {0}
startAtHeadOnHeight=Start at head on height {0}.
descendLevelInCurrentNode=Descend a level in the current node.
nextElementIs=Next element is {0}.
compare=Compare: {0} < {1}
gotoNextElement=Go to the next element. Current element is now {0}.
nextElementIs=Next element is {0}.
nextElementIsNullStop=Because the next element is null, stop traversal.
stopTraversal={0} >= {1}. Stop traversal.
savingPointer=Save pointer to current element in update vector.
updateVectorComplete=Update vector complete until current max. level. Start insertion of the element.
checkIfExists=Check if element already exists in skip list.
elementAlreadyExists=Element already exists. Overwrite value in current node. Done.
determineRandomHeight=No: Height of new node will be determined randomly. Height: {0}.
checkLevelNewElementHigherThanMax=Check if level of new element is greater than the previous max. height.
yesIncreaseVectorHeight=Yes: Previous max. height is {0}. Size of Update vector will incremented by {1}.
forEveryLevelOfNewElement=Set update vector to head for every level of the new element that is larger than current max. level.
updateMaxLevel=Current max. Level is updated.
createNewElement=Create new element {0}.
markedPointersNeedUpdating=Marked pointers have to be corrected.
pointerOnLevelCorrected=Pointers on level {0} corrected.
elementXInsertedSuccess=The element {0} was inserted successfully.
algoConclusion=Due to its special structure, the Skip List has an average complexity of O(log n) for\ninsert operations.\n\nAnother noteworthy characteristic is that it is a randomized data structure because it\nrandomly determines the height of nodes. Insertion of the same elements can lead to\ndifferent states in the data structure in some cases. Alternatively, an implementation\nis possible in which the heights of the nodes are not chosen randomly, but are determined\nquot;perfectlyquot;, so that a complexity of O(log n) can be guaranteed.\n\nThe Skip List is an efficient data structure for basic search, insertion and deletion\noperations, and provides a good alternative to e.g. binary trees.
conclusion=Conclusion
