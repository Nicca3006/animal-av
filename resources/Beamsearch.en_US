noSuchKeyException=There is no resource for the key {0}
iconNotFound=Icon "{0}" not found
beam_title = Beamsearch
beam_description1 = The Beamsearch is a graph search algorithm which was created
beam_description2 = as an optimization of the breadth first search.
beam_description3 = Therefore, the fundamental behavior is very similar.
beam_description4 = However, Beamsearch uses heuristics to evaluate the usefulness of a node
beam_description5 = and thereafter to order all relevant nodes by their usefulness.
beam_description6 = One such heuristic provides knowledge about the enviroment which is to be searched.
beam_description7 = For example: A heuristic could estimate the distance to the target node.
beam_description8 = Many different possible heuristics could be created to serve different goals and help the algorithm adapt.
beam_description9 = Any such heuristics does not need to be perfect, however it should be as close to reality as possible with the existing knowledge in order to be benficial.
beam_description10 = This is because if a heuristic was just random or did not mirror any real correlations it would not help speed
beam_description11 = up the algorithm and might even prove harmful to its performance if compared to traditional blind algorithms.
beam_description12 = An inadequate heuristic will  quickly degrade the algorithms performance to equal or worse performance than breadth-first-search
beam_description13 = In some cases and especially if one is considering low beam width values
beam_description14 = an inadequate heuristic might even prevent a solution from being discovered as a low beam width prunes many options.
beam_description15 = The most important parameter which we just mentioned is the beam-width of the search,
beam_description16 = it determines how many of the highest evaluated states are picked to be explored next and how many are discarded.
beam_description17 = Lowering the width decreases runtime but increases failure rates. The #-beam-width best next states are selected in each iteration (beam-width = MAX => breadth-first-search)
beam_description18 = and this is repeated until the goal state is reached.
beam_visitedHeading = Already visited nodes (Hashmap[Node,Parent]):
beam_candidatesHeading = candidates:
beam_heuristicHeading = beam-width:
beam_beamHeading = nodes currently in beam:
beam_legend = legend
beam_legend_text1 = Colors and Highlighting of the graph:
beam_legend_text2 = Already visited nodes: gray
beam_legend_text3 = current candidates: magenta
beam_legend_text4 = nodes currently in beam: orange
beam_legend_text5 = goal node, path found: green
beam_question1 = Why is a minimal beam-width not necessarily ideal?
beam_question1_answer1 = The alorithm could terminate without finding a solution
beam_question1_answer1_feedback = Correct, a minimal beam-width is prone to get stuck in dead-ends of the graph
beam_question1_answer2 = The algorithm needs to backtrack frequently to find a solution
beam_question1_answer2_feedback = The beam-search in its base-form does not use backtracking.
beam_question1_answer3 = The algorithm can't find a solution because it is just visiting one node at a time.
beam_question1_answer3_feedback = The beam-search can be succesful even with a beam-width of only 1 given an adequate graph and heuristic.
beam_infobox1 = We can clearly see, that the beam-search is an improvement upon the breadth-first-search, because the beam-search can prune
beam_infobox2 = the nodes to be visited before actually visiting them and thereby reduce memory and computation demands,
beam_infobox3 = especially if comparing it to the traditional implementation of the breadth first search.
beam_infobox4 = Furthermore, beam-search converges upon a solution much quicker since less comparisons are necessary due to the prior pruning of candidates.
beam_infobox5 = One needs to consider however, that the possible speedup has its downsides aswell
beam_infobox6 = since beam-search can't guarantee completeness nor can it guarantee an ideal solution for all beam-widths.
beam_infobox7 = Low beam width provide quicker solutions at the cost of them possibly being worse than others which could be found.
beam_question2 = Will the solution found always be the best that exists?
beam_question2_answer1 = No, the algorithm will stop at the first solution found.
beam_question2_answer1_feedback = Correct, since beam-search is a greedy search which is only directed by a heuristic it does not evaluate the quality of the solution.
beam_question2_answer2 = Yes, the algorithm would not terminate otherwise.
beam_question2_answer2_feedback = Incorrect, the algorithm can neither evaluate not does it consider the quality of the solution.
beam_question2_answer3 = If the heuristic is perfect the solution found will be ideal.
beam_question2_answer3_feedback = Correct, there can still be equivalent solutions but given a perfect heuristic the algorithm will find one of the best solutions.
beam_errFinished = ERROR: no path to goal was found:
beam_finished = SUCCESS: A path was found:
beam_description = The beamsearch also known as \"Strahlensuche\"  is a search algorithms for graphs, \n the fundamental behavior is an adaption of the breadth-first-search. \n The algorithm will also use a search heuristic to evaluate possible candidates and iterate more  \n  effectively enabling the algorithms to prune candidates to not have to visit every node, which will  \n  save memory. This is achieved by using a beam-width a parameter, which forms an upper limit  \n of the successors visited per iteration. The algorithm usually will store the visited nodes \n inside a hashmap following a scheme like: \" Node(previousNode)\" this way the \n algorithm can reconstruct the path taken to reach the goal. BeamSearch is prefered especially if, \n the search-graph is very enormous and would take much longer  if searched by traditional  \n algorithms. BeamSearch can also be performed on structures that would require more memory than \n is available if searched by Breadth-First search. The solution found will however rarely be perfect or \n the best possible one, especially with low beam widths \n
