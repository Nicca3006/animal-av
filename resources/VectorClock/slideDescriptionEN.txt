[block]
The vector clock algorithm assigns each process in a distributed system a vector of logical clocks with as many entries as there are processes[br]
in order to find the order of events that happened within these processes.[br]
[br]
Initially, all logical clocks in the clock vectors are set to zero.[br]
[br]
- Whenever an event takes place in a process - either an internal event, the sending of a message or the reception of a message -[br]
first of all, the process increments its own logical clock in its clock vector by one.[br]
[br]
- Whenever a process sends a message to another process, it attaches its current clock vector to the message.[br]
[br]
- Whenever a process receives a message, it compares each logical clock of its current clock vector to the corresponding logical clock of the received clock vector[br]
and updates each entry in its clock vector with the maximum of both values.[br]
[br]
Finally, a timestamp that contains the current clock vector of the process where the event takes place is attached to the event.[br]
[br]
[/block]
[block]
After the events have received timestamps, comparing them allows to find the partial and causal order of the events.[br]
[br]
If an event happened before another event, the following conditions must be fulfilled by the timestamps of the events:
[code]    - All timestamp entries of the event that happened first are less than or equal to the corresponding entries of the timestamp of the other event.[br][br]    - There is at least one entry in the timestamp of the event that happened first that is strictly smaller than the corresponding entry in the timestamp of the other event.[/code]
-> If these conditions are fulfilled for events A and B, it can be stated that event A happened before event B.[br]
[br]
[/block]
[block]
The partial order of the events has the properties of antisymmetry and transitivity:
[code]    - Antisymmetry: If event A happened before event B, then event B cannot have happened before event A.[br][br]    - Transitivity: If event A happened before event B and event B happened before event C, then event A also happened before event C.[/code]
Having no order between two events implies that these events (could have) happened concurrently and that there is no causal relationship between these events.[br]
[br]
[/block]