##### GENERAL #####

title = Secretary Problem
desc = Imagine, you were head of a start-up and had to hire a new assistant. An agency  is about to help you find the 
candidate who will make the grade. Each interview costs you 1 credit, and each time you hire someone 
costs 2 since the agency does not do the job for free. Every time a new best candidate is found, 
you fire the current secretary and hire the new one. Since you still want to keep some money, 
you now try to make the hiring process as cheap as possible.

##### COST #####
c0 = cost: 
c1 = cost: 3
c2 = cost: 6
c3 = cost: 9
c4 = cost: 12
c5 = cost: 15
c6 = cost: 18
c7 = cost: 21
c8 = cost: 24

c9 = cost: 7
c10 = cost: 8
c11 = cost: 11
c12 = cost: 13
c13 = cost: 16

##### EXPLANATION #####

e1 = Probabilistic analysis is a way to make a computational problem or algorithm more efficient.
e2 = The idea is to pre-estimate an algorithms probability of getting into a worst case scenario...
e3 = ...when the complexity or some similar kind of cost is at its maximum.
e4 = This way, you might be able to minimize the propability of a worst case. It is not an always-working magical tool, though.
e5 = To explain the analysis in practice, we want to show you a simplistic first world problem where it could come in handy.
e6 = Imagine, you were head of a start-up and in need of a new, deft secretary.
e7 = For this, you hire an agency that then proposes you a list of candidates.
e8 = The agency does not work for free, of course, so imagine that interviews cost one credit and hiring costs two.
e9 = To make things more difficult to you, you are only allowed to interview one candidate after another.
e10 = Since you would like to save money, you now make plans on how to get the best candidate paying the least...
e11 = First of all, let's take a look at the easiest, linear way to hire our new assistant...
e12 = We initialize the values for the best candidate and the sum of costs that will come over us first.
e13 = We want to go through the array in a linear way till we do not find any better candidate, so let's make a loop.
e14 = Interviewing a candidate, as we said, costs 1 credit, so we sum that up.
e15 = If our current candidate is better than the last one we hired, the last one gets fired and the new one is in.
e16 = We simply swap the 'hired' value for the value of the new best candidate.
e17 = Hiring costs 2 credits, so we sum it up again. The agency should better do a good job at that price.
e18 = Now, the analysis itself strongly depends of the problem that you work with.
e19 = Sometimes, it is best to use distribution functions or any type of indicator function.
e20 = Since our example is meant to be simplistic though, we do not need any mathematical function.
e21 = We just use our brains to look which scenarios get more expensive than others.
e22 = This is, of course, when the candidates are listed ascending.
e23 = The grade of qualification is represented as whole numbers between 1 and 10.
e24 = The better the candidate, the bigger the value.
e25 = So, let's take a look at the worst case szenario.
e26 = As seen, we go through the array until we find a candidate who has greater value than the previous ones.
e27 = The first one always gets the job, as our agency does not propose zeros.
e28 = Now, if the candidates are listed in an ascending order (which might be profitable, but not for us)...
e29 = ... we get to interview and hire each and every candidate on the list.
e30 = We will probably get poor over this method.
e31 = Make it stop!
e32 = Now, since the linear way is certainly not always the cheapest, let's go for a more efficient approach.
e33 = Our goal is to get the same chance of paying an average price every time we want to hire new assistants.
e34 = For this, we write a second method to perform a permutation of the order of our candidates.
e35 = Everything stays the same after the first line, so we will skip the rest...
e36 = ... and take a look at the new method.
e37 = We are going for a method which uses a second array...
e38 = ... that holds randomly generated priorities after which the candidates are then going to be sorted.
e39 = To make the permutation happen, you could go for something like this:
e40 = First, we make an instance of java.util.Random.
e41 = This will be used to get our random priorities later.
e42 = Now, we define a new, empty Array the size of our given one.
e43 = We make a loop to define each cell of the new Array 'b'.
e44 = Here, we use our Random instance.
e45 = Now, the goal of this method is not to permute the elements in an instance, but to fill 'b' with priorities.
e46 = We do that to minimize the probability of getting the same index more than once when we use the Random instance.
e47 = This is also the reason why we pick n^3 as bounding (any big value would do).
e48 = If we just use a bounding from 0 to 9, the probability of getting the same index twice is much higher.
e49 = We now save the random value in b[i].
e50 = Now, we can re-sort our array according to the priorities we generated.
e51 = The idea is to use the value of b[i] as key to re-sort the value of a[i].
e52 = We won't explain this method any further. Think for yourself! You are the boss, after all.
e53 = Let's see what we gained so far.
e54 = The first candidate is in, of course.
e55 = The second one is better than the first, so he gets the job.
e56 = The third and fourth are no good, so off they go.
e57 = Hired again.
e58 = It's a nope.
e59 = This one is in again.
e60 = As you can see, there will be nobody hired after this one, so let's speed things up.
e61 = This case is closer to the average than our worst case was, of course...
e62 = ... and even though it is not the best case, you can already see some improvement.
e63 = As you might remember, at this point, our first case did already cost us 24 credits.
e64 = This is the last option of improvement that we are going to show you.
e65 = It is meant to improve the runtime complexity of the code a bit.
e66 = Of course, we use an instance of java.util.Random again.
e67 = We make a loop, this time, to permute the constellation of the candidates immediately.
e68 = This time, we chose to get ourselves a random number inbetween the bounds of the array.
e69 = As we mentioned earlier, this is not a safe way to get random indices without duplicates...
e70 = ... so there is still room for improvement. Time to get creative!
e71 = With the newly generated indices on hand, we can simply swap elements.
e72 = [...] stands for the code of hireAssistant, since we already know that part.
e73 = And that's it.

##### END #####
end1 = We hope you enjoyed this animation...
end2 = ... and that it helps you run your start-up or rule the universe or whatever.
end3 = THE END

##### HEADERS #####
h1 = The Idea
h2 = hireAssistant
h3 = Example
h4 = hireAssistantRandomized
h5 = permuteBySorting
h6 = Improvement
h7 = randomizeInPlace