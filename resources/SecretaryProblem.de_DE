##### GENERAL #####

title = Bewerberproblem
desc = Stell Dir vor, Du seist Chef eines Start-Ups und auf der Suche nach einem neuen Sekret\u00e4r. 
Eine Agentur soll dir helfen, den richtigen Kandidaten zu finden. Ein Interview kostet dich daf\u00fcr einen Credit,
und jedes Mal, wenn du einen Kandidaten einstellst, kostet das noch einmal zwei.
Wann immer ein besserer Kandidat als der aktuelle gefunden wird, wird der aktuelle gefeuert und der neue angestellt.
Weil Du gerne etwas Geld sparen m\u00f6chtest, versuchst Du nun, den Prozess m\u00f6glichst g\u00fcnstig zu gestalten.

##### COST #####
c0 = Kosten: 
c1 = Kosten: 3
c2 = Kosten: 6
c3 = Kosten: 9
c4 = Kosten: 12
c5 = Kosten: 15
c6 = Kosten: 18
c7 = Kosten: 21
c8 = Kosten: 24

c9 = Kosten: 7
c10 = Kosten: 8
c11 = Kosten: 11
c12 = Kosten: 13
c13 = Kosten: 16

##### EXPLANATION #####

e1 = Probabilistische Analyse ist eine M\u00f6glichkeit, einen bestehenden Algorithmus effizienter zu machen.
e2 = Die Idee ist, eine Voreinsch\u00e4tzung \u00fcber die Wahrscheinlichkeit zu treffen, ...
e3 = ... dass ein besonders teurer Fall eintritt (Komplexit\u00e4t oder Anderes).
e4 = Es ist m\u00f6glich, dadurch die Wahrscheinlichkeit, dass ein schlimmster Fall eintritt, zu minimieren.
e5 = Um das Verfahren in der Praxis zu erkl\u00e4ren, wollen wir Dir ein einfaches Problem vorstellen, bei dem es einsetzbar w\u00e4re.
e6 = Stell Dir also vor, du seist Chef eines Start-Up-Unternehmens und auf der Suche nach einem flinken, neuen Sekret\u00e4r.
e7 = Hierf\u00fcr heuerst Du eine Agentur an, die Dir eine Liste passender Kandidaten vermittelt.
e8 = Die Agentur arbeitet nat\u00fcrlich nicht umsonst. Ein Interview kostet einen Credit, eine Einstellung kostet 2.
e9 = Um das Ganze noch etwas zu erschweren, darfst du die Kandidaten immer nur einen nach dem anderen interviewen.
e10 = Weil Du gerne etwas Geld sparen m\u00f6chtest, planst Du nun, wie Du das Ganze m\u00f6glichst kosteng\u00fcnstig gestalten kannst.
e11 = Zuerst einmal zeigen wir Dir den einfachsten, linearen Weg, den neuen Sekret\u00e4r herauszusuchen...
e12 = Zuerst initialisieren wir einen Wert f\u00fcr den besten (bzw. zuletzt eingestellten) Kandidaten und f\u00fcr die anfallenden Kosten.
e13 = Wir wollen das Array linear durchgehen, bis wir keinen besseren Kandidaten mehr finden.
e14 = Ein Interview kostet einen Credit, also summieren wir den Wert auf.
e15 = Wenn unser aktueller Kandidat besser als der aktuelle Sekret\u00e4r ist, wird dieser gefeuert und der Neue hat den Job.
e16 = Wir tauschen den Wert in 'hired' einfach mit dem aktuellen Wert aus.
e17 = Anheuern kostet 2 Credits, also summieren wir wieder auf.
e18 = Die Art der Analyse h\u00e4ngt stark von dem zugrundeliegenden Problem ab.
e19 = Oft bieten sich Verteilungs- oder Indikatorfunktionen zur Analyse an.
e20 = Weil unser Beispiel aber greifbar sein soll, brauchen wir hier keine solche Mathematik.
e21 = Wir \u00fcberlegen uns einfach, welche Szenarien teurer werden als andere.
e22 = Der teuerste Fall ist hier nat\u00fcrlich, wenn die Kanidaten aufsteigend sortiert sind.
e23 = Den Wert der Qualifikation jedes Kandidaten kodieren wir mit Werten von 1 bis 10.
e24 = Je besser der Kandidat, desto h\u00f6her der Wert.
e25 = Lasst uns einen Blick auf den schlechtesten Fall werfen.
e26 = Wir gehen also durch unsere Liste, bis wir einen besseren Kandidaten als den aktuellen finden.
e27 = Weil die Agentur uns keine Nullen stellt, bekommt der erste Kandidat immer den Job.
e28 = Wenn die Kandidaten nun aufsteigend sortiert sind (was wir vorher ja nicht wissen k\u00f6nnen)...
e29 = ... m\u00fcssen wir jeden Einzelnen auf der Liste interviewen und einstellen.
e30 = Wir werden mit dieser Methode vermutlich arm.
e31 = Aufh\u00f6ren!
e32 = Weil der lineare Weg so teuer ist, lass' uns eine g\u00fcnstigere Methode finden.
e33 = Unser Ziel ist, bei jedem Durchgehen der Liste dieselbe Chance auf einen durchschnittlichen Preis zu bekommen.
e34 = Daf\u00fcr schreiben wir eine zweite Methode, die eine Permutation der Reihenfolge der Kandidaten bewirkt.
e35 = Nach der ersten Zeile bleibt alles wie gehabt, also \u00fcberspringen wir den Rest...
e36 = ... und sehen uns direkt die neue Methode an.
e37 = Wir benutzen hier ein zweites Array, das zuf\u00e4llig generierte Priorit\u00e4ten enth\u00e4lt, ...
e38 = ... nach denen die Kandidaten dann neu sortiert werden.
e39 = Um das zu bewerkstelligen, k\u00f6nnte man etwa so vorgehen:
e40 = Zuerst machen wir eine Instanz von java.util.Random.
e41 = Damit generieren wir sp\u00e4ter die zuf\u00e4lligen Priorit\u00e4ten f\u00fcr unsere Kandidaten.
e42 = Jetzt definieren wir ein neues Array von der Gr\u00f6\u00dfe unserer Kandidatenliste.
e43 = Wir machen eine Schleife, um die Zellen des Arrays 'b' zu setzen.
e44 = Hier benutzen wir unsere Random-Instanz.
e45 = Wie gesagt, ist das Ziel nicht, 'a' direkt zu permutieren, sondern 'b' mit Priorit\u00e4ten f\u00fcr die Elemente aus 'a' zu f\u00fcllen.
e46 = Wir tun dies, um die Wahrscheinlichkeit zu verringern, zweimal denselben Index zu vergeben.
e47 = Deshalb benutzen wir als Grenze auch n^3. Hier kann eine beliebige gro\u00dfe Zahl verwendet werden.
e48 = W\u00fcrden wir nur innerhalb eines Intervalls von 0 bis 9 arbeiten, w\u00e4re diese Wahrscheinlichkeit deutlich h\u00f6her.
e49 = Wir speichern den generieren Wert in 'b[i]'.
e50 = Jetzt k\u00f6nnen wir unsere Bewerberliste mithilfe der Priorit\u00e4ten neu sortieren.
e51 = Die Idee ist, den Wert in 'b[i]' als Schl\u00fcssel zu verwenden, um den neuen Index von 'a[i]' zu bestimmen.
e52 = Wir gehen hier nicht weiter auf diese Methode ein, Du kannst an dieser Stelle kreativ werden. Du bist der Boss!
e53 = Lass' uns sehen, inwiefern wir eine Verbesserung bewirkt haben.
e54 = Der erste Kandidat hat den Job, nat\u00fcrlich.
e55 = Der zweite ist besser als der erste, also bekommt er den Job.
e56 = Der dritte und vierte d\u00fcrfen gehen.
e57 = Angeheuert.
e58 = Wir melden uns.
e59 = Dieser ist wieder dabei.
e60 = Wie Du sehen kannst, wird nach diesem Kandidaten niemand mehr eingestellt, also weiter.
e61 = Dieser Fall ist n\u00e4her am Durchschnitt als der vorige ...
e62 = ... und, obwohl es nicht der beste ist, kann man schon eine Verbesserung erkennen.
e63 = Wie du dich vielleicht erinnerst, waren wir an dieser Stelle im 1. Fall bei 24 Credits.
e64 = Das hier wird die letzte Verbesserungsm\u00f6glichkeit sein, die wir Dir vorstellen.
e65 = Hier wollen wir die Laufzeit noch etwas verbessern.
e66 = Nat\u00fcrlich nutzen wir wieder java.util.Random.
e67 = Diesmal machen wir eine Schleife, um die Positionen der Bewerber direkt zu vertauschen.
e68 = Wir randomisieren auch nur innerhalb der Arrayl\u00e4nge.
e69 = Wie wir bereits sagten, ist dies kein sicherer Weg, die Werte zu vertauschen...
e70 = ... also ist hier immer noch Raum f\u00fcr Verbesserung. Zeit, kreativ zu werden!
e71 = Wir tauschen die Werte an Stelle 'i' mit denen an den randomisieren Indizes.
e72 = [...] steht f\u00fcr den Code von hireAssistant, den Teil kennen wir ja.
e73 = Und das war's.

##### END #####
end1 = Wir hoffen, dass Dir diese Animation gefallen hat...
end2 = ... und, dass sie Dir hilft, Dein Start-Up ins Rollen zu bringen oder \u00fcber das Universum zu herrschen oder so.
end3 = ENDE

##### HEADERS #####
h1 = Die Idee
h2 = hireAssistant
h3 = Beispiel
h4 = hireAssistantRandomized
h5 = permuteBySorting
h6 = Verbesserung
h7 = randomizeInPlace