algoName=CuckooHashing
name=Cuckoo Hashing
headerText=Cuckoo Hashing
elementToInsert=Element to insert: {0}
insert=Insert: {0}
assureFillLevel=Make sure neither table exceeds fill level.
fillLevelExceededIncrease=Failed. At least one table exceeded the desired fill level. Increase table size to {0} and reinsert all elements.
increaseTableSizeTo=Increase table size to {0}
reinsertedAll=Reinserted all elements!
reinsertionDone=Reinsertion done.
calculated=Calculated {0}({1}) = {2}
tableEmpty={0}[{1}] is empty. Insert {2} here.
tableContains={0}[{1}] already contains {2}. Overwrite.
insertionComplete=Insertion complete!
tryTable2=Could not insert in table1. Try table2
neitherTableHasSpace=Neither table has space on first try. Buffer both tables.
spaceInFirst=There was space in the first table.
spaceInSecond=There was space in the second table.
noSpaceInFirst=There was no space in the first table!
noSpaceInSecond=There was no space in the second table!
checkIfChanged=Check if tables have changed.
changed=Yes, tables have changed. Continue in loop.
notChanged=No, tables have not changed. Stop loop.
needRehash=Need to rehash tables.
rehashing=Rehashing
rehashingDone=Rehashing done.
nowInsertRemaining=Now insert remaining element {0}.
rehashingAndInsertionDone=Rehashing and insertion of remaining element done!
swap=Swap {0} with {1}
storeAll=Store all already inserted elements.
defineNewHashfunctions=Define new hashfunctions and clear tables.
insertStored=Insert stored Elements in new empty tables.
algoDescription=Cuckoo hashing is an algorithm for resolving collisions in hash tables.\nTwo separate hash tables and two hash functions are used. If the position calculated\nwith the first hash function is already occupied when an element is inserted\ninto the first table, the hash value is calculated using the second hash function\nand the element is inserted if this position is still free in table two.\nIf this position is also occupied in the second table, elements push each other out of the tables.\nThereby, one element always pushes another element out of the table in which it was not in before.\nThis happens until all elements could be inserted or until\nthe table constellations are the same as at the beginning of the swap.\nIn this case, the hash functions are replaced by two new ones and all elements\nare re-inserted into the two empty tables.\n\nThe name derives from cuckoo chicks, which push foreign eggs from a nest.\n\nAs with the use of all hash tables, it may be necessary to increase the size\nof the tables if a specified fill level is exceeded.
introduction=Introduction
algoConclusion=The complexity of insertion in cuckoo hashing is O(n).\nThe complexity for searching and deleting is O(1), since elements are found by a maximum of two operations.\n\nOne feature of the hashing algorithm is that the first table\nis much more crowded than the second in a normal, not artificially created case.
conclusion=Conclusion
sizeAllowedValues=Only values greater than 0 are allowed for the initial table size.
recursionDepth=Only values greater than 0 or equal to 0 are allowed for the recursion depth.
fillLevel=Only values greater than 0 and smaller than 1 or equal to 1 are allowed for the fill level.
factorIncreasing=Only values greater than 1 are allowed for the factor during increasing the table size.
invalidInput=Invalid input
