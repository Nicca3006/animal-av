noSuchKeyException=there is no ressource for the key {0}
iconNotFound=Icon "{0}" not found


### Basic Information ###
title=Jump Point Search
algorithmName=Jump Point Search


### Description / Intro ###
introLine1=Jump Point Search (JPS) is an optimization of the A* search algorithm for
introLine2=uniform-cost grids. The algorithm reduces symmetries in the search procedure by means of
introLine3=graph pruning, eliminating certain nodes in the grid based on assumptions
introLine4=that can be made about the current node's neighbors, as long as certain
introLine5=conditions relating to the grid are satisfied.
introLine6=As a result, the algorithm can consider long \'jumps\' along straight (horizontal, vertical
introLine7=and diagonal) lines in the grid, rather than the small steps from one
introLine8=grid position to the next that ordinary A* considers.
introLine9=Jump point search preserves A*'s optimality, while potentially reducing its running time by an
introLine10=order of magnitude.
introLine11= 
introLine12=Source: Wikipedia (26.08.2019): https://en.wikipedia.org/wiki/Jump_point_search


### Source Code ###
codeLine1=ArrayList JPS (startPos, endPos, maze) '{'
codeLine2=maze.heapAdd(startPos);
codeLine3=JPSnode cur;
codeLine4=while (true) '{'
codeLine5=cur = maze.heapPopNode(); //remove current node from heap
codeLine6=if (cur.Pos == endPos) '{'
codeLine7=Arraylist trail = CreatePathToCur(cur); //create shortes path from start to end position
codeLine8=return trail
codeLine9='}'
codeLine10=if (cur != startPos) '{'
codeLine11=jump(cur);
codeLine12='}'
codeLine13=possibleSuccessors[] = identifySuccessors (cur); //return list of all possible successors, already pruned
codeLine14=foreach (successor in possibleSuccessors[]) '{'
codeLine15=heapAdd(successor);
codeLine16='}'
codeLine17=if (maze.heapSize == 0) '{'
codeLine18=return null; // end not reachable
codeLine19='}'
codeLine20='}'
codeLine21='}'
codeLine22=JPSnode[] identifySuccessors (cur) '{'
codeLine23=successors = new JPSNode;
codeLine24=neighbours = getNeighborsPrune(cur); //returns all walkable neighbours
codeLine25=foreach (neighbour in neighbours) '{'
codeLine26=jumppoint = jump(neighbour, cur); //jumps to the last possible Point in the travelline
codeLine27=int distance = distanceToStart(jumppoint)
codeLine28=if (node != exist && !shortDistanceExistForCur) '{'
codeLine29=successors.add(node)
codeLine30='}'
codeLine31='}'
codeLine32=return successors
codeLine33='}'

clIndentation1=0
clIndentation2=1
clIndentation3=1
clIndentation4=1
clIndentation5=2
clIndentation6=2
clIndentation7=3
clIndentation8=3
clIndentation9=2
clIndentation10=2
clIndentation11=3
clIndentation12=2
clIndentation13=2
clIndentation14=2
clIndentation15=3
clIndentation16=2
clIndentation17=2
clIndentation18=3
clIndentation19=2
clIndentation20=1
clIndentation21=0
clIndentation22=0
clIndentation23=1
clIndentation24=1
clIndentation25=1
clIndentation26=2
clIndentation27=2
clIndentation28=2
clIndentation29=3
clIndentation30=2
clIndentation31=1
clIndentation32=1
clIndentation33=0


### Summary / Outro ###
outroLine1=Thanks for watching 'Jump Point Search'!
outroLine2=We hope you enjoyed it!
outroLine3=Christian and Jonas


### Interactivity ###
interCorrect=correct
interWrong=wrong
possibleSuccessorsQuestion=What are possible successors for the current Node?
shortestPathQuestion=How many JumpPoints does the shortest Path has?


### Variables ###
varCurrent=CurrentNode
varJumpPointCounter=JumpPointCounter
varNeccesaryJumpPoints=NeccesaryJumpPoints