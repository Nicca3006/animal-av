<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:exercise xmlns:ns2="http://www.algoanim.info/Animal2/">
    <chainPath>/Graph/Kruskal/Pseudo-Code/en/Kruskal</chainPath>
    <description>Kruskal's Algorithm for computing the minimum spanning tree is directly based on the generic MST algorithm. It builds the MST in forest. Initially, each vertex is in its own tree in forest. Then, algorithm consider each edge in turn, order by increasing weight. If an edge (u, v) connects two different trees, then (u, v) is added to the set of edges of the MST, and two trees connected by an edge (u, v) are merged into a single tree on the other hand, if an edge (u, v) connects two vertices in the same tree, then edge (u, v) is discarded.

graph 4 directed weighted

edge A B weight 1
edge A C weight 4
edge B C weight 2
edge B D weight 5
edge C D weight 1</description>
    <generatorName>generators.graph.kruskal.Kruskal</generatorName>
    <questionsList>
        <decisionBox xsi:type="scriptBox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <inputVariables>
                <name>fromNode</name>
            </inputVariables>
            <inputVariables>
                <name>toNode</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <next xsi:type="assignBox">
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="assignBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <next xsi:type="functionBox">
                                        <function xsi:type="ok"/>
                                    </next>
                                    <function xsi:type="check"/>
                                    <arguments xsi:type="constantValue">
                                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                    </arguments>
                                </next>
                                <function xsi:type="debug"/>
                            </next>
                            <variableName>to2</variableName>
                            <expression xsi:type="functionBox">
                                <function xsi:type="retrieve"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                                </arguments>
                            </expression>
                        </next>
                        <variableName>to1</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgeto</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>from2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgefrom</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgefrom</value>
                    </arguments>
                </expression>
            </next>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="assignBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <next xsi:type="functionBox">
                                        <function xsi:type="ok"/>
                                    </next>
                                    <function xsi:type="check"/>
                                    <arguments xsi:type="constantValue">
                                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                    </arguments>
                                </next>
                                <function xsi:type="debug"/>
                            </next>
                            <variableName>to2</variableName>
                            <expression xsi:type="functionBox">
                                <function xsi:type="retrieve"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                                </arguments>
                            </expression>
                        </next>
                        <variableName>to1</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgeto</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>from2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgefrom</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgefrom</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <function xsi:type="ok"/>
                                </next>
                                <function xsi:type="check"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                </arguments>
                            </next>
                            <function xsi:type="debug"/>
                        </next>
                        <variableName>to2</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>to1</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from2</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgefrom</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>to1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgeto</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <function xsi:type="ok"/>
                        </next>
                        <function xsi:type="check"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                        </arguments>
                    </next>
                    <function xsi:type="debug"/>
                </next>
                <variableName>to2</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                    </arguments>
                </expression>
            </AssignBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <function xsi:type="ok"/>
                    </next>
                    <function xsi:type="check"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                    </arguments>
                </next>
                <function xsi:type="debug"/>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <function xsi:type="ok"/>
                </next>
                <function xsi:type="check"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <function xsi:type="ok"/>
            </FunctionBox>
        </decisionBox>
        <inputVariables>
            <name>fromNode</name>
        </inputVariables>
        <inputVariables>
            <name>toNode</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <questionId>Question-3454406021292313176583</questionId>
        <questionText>1. Sort all edges  in increasing order of length and give the first edge. </questionText>
        <script>// No script
from1 = Retrieve("events/sortedEdges[seqnr= 1]/edgefrom");
from2 = Retrieve("events/sortedEdges[seqnr= 2]/edgefrom");
to1 = Retrieve("events/sortedEdges[seqnr= 1]/edgeto");
to2 = Retrieve("events/sortedEdges[seqnr= 2]/edgeto");
Debug();
Check("(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) ");


Ok();
</script>
    </questionsList>
    <questionsList>
        <decisionBox xsi:type="scriptBox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <inputVariables>
                <name>fromNode</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <inputVariables>
                <name>toNode</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <next xsi:type="assignBox">
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="assignBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <next xsi:type="functionBox">
                                        <function xsi:type="ok"/>
                                    </next>
                                    <function xsi:type="check"/>
                                    <arguments xsi:type="constantValue">
                                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                    </arguments>
                                </next>
                                <function xsi:type="debug"/>
                            </next>
                            <variableName>to2</variableName>
                            <expression xsi:type="functionBox">
                                <function xsi:type="retrieve"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                                </arguments>
                            </expression>
                        </next>
                        <variableName>to1</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgeto</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>from2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgefrom</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgefrom</value>
                    </arguments>
                </expression>
            </next>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="assignBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <next xsi:type="functionBox">
                                        <function xsi:type="ok"/>
                                    </next>
                                    <function xsi:type="check"/>
                                    <arguments xsi:type="constantValue">
                                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                    </arguments>
                                </next>
                                <function xsi:type="debug"/>
                            </next>
                            <variableName>to2</variableName>
                            <expression xsi:type="functionBox">
                                <function xsi:type="retrieve"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                                </arguments>
                            </expression>
                        </next>
                        <variableName>to1</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgeto</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>from2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgefrom</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgefrom</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <function xsi:type="ok"/>
                                </next>
                                <function xsi:type="check"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                </arguments>
                            </next>
                            <function xsi:type="debug"/>
                        </next>
                        <variableName>to2</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>to1</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from2</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgefrom</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>to1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/edgeto</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <function xsi:type="ok"/>
                        </next>
                        <function xsi:type="check"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                        </arguments>
                    </next>
                    <function xsi:type="debug"/>
                </next>
                <variableName>to2</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/edgeto</value>
                    </arguments>
                </expression>
            </AssignBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <function xsi:type="ok"/>
                    </next>
                    <function xsi:type="check"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                    </arguments>
                </next>
                <function xsi:type="debug"/>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <function xsi:type="ok"/>
                </next>
                <function xsi:type="check"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <function xsi:type="ok"/>
            </FunctionBox>
        </decisionBox>
        <inputVariables>
            <name>fromNode</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <inputVariables>
            <name>toNode</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <questionId>Question-3454406021292313381894</questionId>
        <questionText>2. Sort all edges  in increasing order of length and give the second edge. </questionText>
        <script>// No script
from1 = Retrieve("events/sortedEdges[seqnr= 1]/edgefrom");
from2 = Retrieve("events/sortedEdges[seqnr= 2]/edgefrom");
to1 = Retrieve("events/sortedEdges[seqnr= 1]/edgeto");
to2 = Retrieve("events/sortedEdges[seqnr= 2]/edgeto");
Debug();
Check("(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) ");


Ok();

</script>
    </questionsList>
    <questionsList>
        <decisionBox xsi:type="scriptBox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <inputVariables>
                <name>fromNode</name>
            </inputVariables>
            <inputVariables>
                <name>toNode</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <next xsi:type="assignBox">
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/edgefrom</value>
                    </arguments>
                </expression>
            </next>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/edgefrom</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <function xsi:type="ok"/>
                        </next>
                        <function xsi:type="check"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                        </arguments>
                    </next>
                    <function xsi:type="debug"/>
                </next>
                <variableName>to</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/edgeto</value>
                    </arguments>
                </expression>
            </AssignBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <function xsi:type="ok"/>
                    </next>
                    <function xsi:type="check"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                    </arguments>
                </next>
                <function xsi:type="debug"/>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <function xsi:type="ok"/>
                </next>
                <function xsi:type="check"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <function xsi:type="ok"/>
            </FunctionBox>
        </decisionBox>
        <inputVariables>
            <name>fromNode</name>
        </inputVariables>
        <inputVariables>
            <name>toNode</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <questionId>Question-3454406021292321796885</questionId>
        <questionText>3. Sort all edges  in increasing order of length and give the third edge. </questionText>
        <script>// No script
from = Retrieve("events/sortedEdges[seqnr= 3]/edgefrom");
to = Retrieve("events/sortedEdges[seqnr= 3]/edgeto");
Debug();
Check("($from = $fromNode) and ($to = $toNode)");


Ok();</script>
    </questionsList>
    <questionsList>
        <decisionBox xsi:type="scriptBox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <inputVariables>
                <name>fromNode</name>
            </inputVariables>
            <inputVariables>
                <name>toNode</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <next xsi:type="assignBox">
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 4]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 4]/edgefrom</value>
                    </arguments>
                </expression>
            </next>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 4]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 4]/edgefrom</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <function xsi:type="ok"/>
                        </next>
                        <function xsi:type="check"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                        </arguments>
                    </next>
                    <function xsi:type="debug"/>
                </next>
                <variableName>to</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 4]/edgeto</value>
                    </arguments>
                </expression>
            </AssignBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <function xsi:type="ok"/>
                    </next>
                    <function xsi:type="check"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                    </arguments>
                </next>
                <function xsi:type="debug"/>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <function xsi:type="ok"/>
                </next>
                <function xsi:type="check"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <function xsi:type="ok"/>
            </FunctionBox>
        </decisionBox>
        <inputVariables>
            <name>fromNode</name>
        </inputVariables>
        <inputVariables>
            <name>toNode</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <questionId>Question-3454406021292324992888</questionId>
        <questionText>4. Sort all edges  in increasing order of length and give the fourth edge. </questionText>
        <script>// No script
from = Retrieve("events/sortedEdges[seqnr= 4]/edgefrom");
to = Retrieve("events/sortedEdges[seqnr= 4]/edgeto");
Debug();
Check("($from = $fromNode) and ($to = $toNode)");


Ok();</script>
    </questionsList>
    <questionsList>
        <decisionBox xsi:type="scriptBox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <inputVariables>
                <name>fromNode</name>
            </inputVariables>
            <inputVariables>
                <name>toNode</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <next xsi:type="assignBox">
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 5]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 5]/edgefrom</value>
                    </arguments>
                </expression>
            </next>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 5]/edgeto</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 5]/edgefrom</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <function xsi:type="ok"/>
                        </next>
                        <function xsi:type="check"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                        </arguments>
                    </next>
                    <function xsi:type="debug"/>
                </next>
                <variableName>to</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 5]/edgeto</value>
                    </arguments>
                </expression>
            </AssignBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <function xsi:type="ok"/>
                    </next>
                    <function xsi:type="check"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                    </arguments>
                </next>
                <function xsi:type="debug"/>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <function xsi:type="ok"/>
                </next>
                <function xsi:type="check"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode)</value>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <function xsi:type="ok"/>
            </FunctionBox>
        </decisionBox>
        <inputVariables>
            <name>fromNode</name>
        </inputVariables>
        <inputVariables>
            <name>toNode</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <questionId>Question-3454406021292325039607</questionId>
        <questionText>5. Sort all edges  in increasing order of length and give the fifth edge. </questionText>
        <script>// No script
from = Retrieve("events/sortedEdges[seqnr= 5]/edgefrom");
to = Retrieve("events/sortedEdges[seqnr= 5]/edgeto");
Debug();
Check("($from = $fromNode) and ($to = $toNode)");


Ok();</script>
    </questionsList>
    <questionsList>
        <decisionBox xsi:type="scriptBox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <inputVariables>
                <name>fromNode</name>
            </inputVariables>
            <inputVariables>
                <name>toNode</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <next xsi:type="assignBox">
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="assignBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <next xsi:type="functionBox">
                                        <next xsi:type="functionBox">
                                            <function xsi:type="ok"/>
                                        </next>
                                        <function xsi:type="comment"/>
                                        <arguments xsi:type="constantValue">
                                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.</value>
                                        </arguments>
                                        <arguments xsi:type="valueOfIdentifier">
                                            <variableName>from1</variableName>
                                        </arguments>
                                        <arguments xsi:type="valueOfIdentifier">
                                            <variableName>to1</variableName>
                                        </arguments>
                                        <arguments xsi:type="valueOfIdentifier">
                                            <variableName>from2</variableName>
                                        </arguments>
                                        <arguments xsi:type="valueOfIdentifier">
                                            <variableName>to2</variableName>
                                        </arguments>
                                    </next>
                                    <function xsi:type="check"/>
                                    <arguments xsi:type="constantValue">
                                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                    </arguments>
                                </next>
                                <function xsi:type="debug"/>
                            </next>
                            <variableName>to2</variableName>
                            <expression xsi:type="functionBox">
                                <function xsi:type="retrieve"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 4]/distance</value>
                                </arguments>
                            </expression>
                        </next>
                        <variableName>from2</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 3]/distance</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>to1</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 2]/distance</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 1]/distance</value>
                    </arguments>
                </expression>
            </next>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="assignBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <next xsi:type="functionBox">
                                        <next xsi:type="functionBox">
                                            <function xsi:type="ok"/>
                                        </next>
                                        <function xsi:type="comment"/>
                                        <arguments xsi:type="constantValue">
                                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.</value>
                                        </arguments>
                                        <arguments xsi:type="valueOfIdentifier">
                                            <variableName>from1</variableName>
                                        </arguments>
                                        <arguments xsi:type="valueOfIdentifier">
                                            <variableName>to1</variableName>
                                        </arguments>
                                        <arguments xsi:type="valueOfIdentifier">
                                            <variableName>from2</variableName>
                                        </arguments>
                                        <arguments xsi:type="valueOfIdentifier">
                                            <variableName>to2</variableName>
                                        </arguments>
                                    </next>
                                    <function xsi:type="check"/>
                                    <arguments xsi:type="constantValue">
                                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                    </arguments>
                                </next>
                                <function xsi:type="debug"/>
                            </next>
                            <variableName>to2</variableName>
                            <expression xsi:type="functionBox">
                                <function xsi:type="retrieve"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 4]/distance</value>
                                </arguments>
                            </expression>
                        </next>
                        <variableName>from2</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 3]/distance</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>to1</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 2]/distance</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 1]/distance</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <next xsi:type="functionBox">
                                        <function xsi:type="ok"/>
                                    </next>
                                    <function xsi:type="comment"/>
                                    <arguments xsi:type="constantValue">
                                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.</value>
                                    </arguments>
                                    <arguments xsi:type="valueOfIdentifier">
                                        <variableName>from1</variableName>
                                    </arguments>
                                    <arguments xsi:type="valueOfIdentifier">
                                        <variableName>to1</variableName>
                                    </arguments>
                                    <arguments xsi:type="valueOfIdentifier">
                                        <variableName>from2</variableName>
                                    </arguments>
                                    <arguments xsi:type="valueOfIdentifier">
                                        <variableName>to2</variableName>
                                    </arguments>
                                </next>
                                <function xsi:type="check"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                                </arguments>
                            </next>
                            <function xsi:type="debug"/>
                        </next>
                        <variableName>to2</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 4]/distance</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>from2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 3]/distance</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>to1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 2]/distance</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <function xsi:type="ok"/>
                                </next>
                                <function xsi:type="comment"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.</value>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>from1</variableName>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>to1</variableName>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>from2</variableName>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>to2</variableName>
                                </arguments>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 4]/distance</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from2</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 3]/distance</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="comment"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.</value>
                            </arguments>
                            <arguments xsi:type="valueOfIdentifier">
                                <variableName>from1</variableName>
                            </arguments>
                            <arguments xsi:type="valueOfIdentifier">
                                <variableName>to1</variableName>
                            </arguments>
                            <arguments xsi:type="valueOfIdentifier">
                                <variableName>from2</variableName>
                            </arguments>
                            <arguments xsi:type="valueOfIdentifier">
                                <variableName>to2</variableName>
                            </arguments>
                        </next>
                        <function xsi:type="check"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                        </arguments>
                    </next>
                    <function xsi:type="debug"/>
                </next>
                <variableName>to2</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 4]/distance</value>
                    </arguments>
                </expression>
            </AssignBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <function xsi:type="ok"/>
                        </next>
                        <function xsi:type="comment"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.</value>
                        </arguments>
                        <arguments xsi:type="valueOfIdentifier">
                            <variableName>from1</variableName>
                        </arguments>
                        <arguments xsi:type="valueOfIdentifier">
                            <variableName>to1</variableName>
                        </arguments>
                        <arguments xsi:type="valueOfIdentifier">
                            <variableName>from2</variableName>
                        </arguments>
                        <arguments xsi:type="valueOfIdentifier">
                            <variableName>to2</variableName>
                        </arguments>
                    </next>
                    <function xsi:type="check"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                    </arguments>
                </next>
                <function xsi:type="debug"/>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <function xsi:type="ok"/>
                    </next>
                    <function xsi:type="comment"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.</value>
                    </arguments>
                    <arguments xsi:type="valueOfIdentifier">
                        <variableName>from1</variableName>
                    </arguments>
                    <arguments xsi:type="valueOfIdentifier">
                        <variableName>to1</variableName>
                    </arguments>
                    <arguments xsi:type="valueOfIdentifier">
                        <variableName>from2</variableName>
                    </arguments>
                    <arguments xsi:type="valueOfIdentifier">
                        <variableName>to2</variableName>
                    </arguments>
                </next>
                <function xsi:type="check"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) </value>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <function xsi:type="ok"/>
                </next>
                <function xsi:type="comment"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.</value>
                </arguments>
                <arguments xsi:type="valueOfIdentifier">
                    <variableName>from1</variableName>
                </arguments>
                <arguments xsi:type="valueOfIdentifier">
                    <variableName>to1</variableName>
                </arguments>
                <arguments xsi:type="valueOfIdentifier">
                    <variableName>from2</variableName>
                </arguments>
                <arguments xsi:type="valueOfIdentifier">
                    <variableName>to2</variableName>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <function xsi:type="ok"/>
            </FunctionBox>
        </decisionBox>
        <inputVariables>
            <name>fromNode</name>
        </inputVariables>
        <inputVariables>
            <name>toNode</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <questionId>Question-3454406021292325173375</questionId>
        <questionText>6. Give your first chosen edge.</questionText>
        <script>// No script
from1 = Retrieve("events/findDistance[seqnr= 1]/distance");
to1 = Retrieve("events/findDistance[seqnr= 2]/distance");
from2 = Retrieve("events/findDistance[seqnr= 3]/distance");
to2 = Retrieve("events/findDistance[seqnr= 4]/distance");
Debug();
Check("(($from1 = $fromNode) and ($to1 = $toNode)) or (($from2 = $fromNode) and ($to2 = $toNode)) ");
Comment("The edge %s-%s or the edge %s-%s is the shortest one with the weight 1.",from1,to1,from2,to2);


Ok();</script>
    </questionsList>
    <questionsList>
        <decisionBox xsi:type="scriptBox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <inputVariables>
                <name>fromNode</name>
            </inputVariables>
            <inputVariables>
                <name>toNode</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <next xsi:type="assignBox">
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <function xsi:type="ok"/>
                                </next>
                                <function xsi:type="comment"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s  is the third chosen one with the weight 2.</value>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>from</variableName>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>to</variableName>
                                </arguments>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode) </value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 6]/distance</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 5]/distance</value>
                    </arguments>
                </expression>
            </next>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <function xsi:type="ok"/>
                                </next>
                                <function xsi:type="comment"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s  is the third chosen one with the weight 2.</value>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>from</variableName>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>to</variableName>
                                </arguments>
                            </next>
                            <function xsi:type="check"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode) </value>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>to</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 6]/distance</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>from</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 5]/distance</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                            </next>
                            <function xsi:type="comment"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s  is the third chosen one with the weight 2.</value>
                            </arguments>
                            <arguments xsi:type="valueOfIdentifier">
                                <variableName>from</variableName>
                            </arguments>
                            <arguments xsi:type="valueOfIdentifier">
                                <variableName>to</variableName>
                            </arguments>
                        </next>
                        <function xsi:type="check"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode) </value>
                        </arguments>
                    </next>
                    <function xsi:type="debug"/>
                </next>
                <variableName>to</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/findDistance[seqnr= 6]/distance</value>
                    </arguments>
                </expression>
            </AssignBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <function xsi:type="ok"/>
                        </next>
                        <function xsi:type="comment"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s  is the third chosen one with the weight 2.</value>
                        </arguments>
                        <arguments xsi:type="valueOfIdentifier">
                            <variableName>from</variableName>
                        </arguments>
                        <arguments xsi:type="valueOfIdentifier">
                            <variableName>to</variableName>
                        </arguments>
                    </next>
                    <function xsi:type="check"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode) </value>
                    </arguments>
                </next>
                <function xsi:type="debug"/>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <function xsi:type="ok"/>
                    </next>
                    <function xsi:type="comment"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s  is the third chosen one with the weight 2.</value>
                    </arguments>
                    <arguments xsi:type="valueOfIdentifier">
                        <variableName>from</variableName>
                    </arguments>
                    <arguments xsi:type="valueOfIdentifier">
                        <variableName>to</variableName>
                    </arguments>
                </next>
                <function xsi:type="check"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">($from = $fromNode) and ($to = $toNode) </value>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <function xsi:type="ok"/>
                </next>
                <function xsi:type="comment"/>
                <arguments xsi:type="constantValue">
                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">The edge %s-%s  is the third chosen one with the weight 2.</value>
                </arguments>
                <arguments xsi:type="valueOfIdentifier">
                    <variableName>from</variableName>
                </arguments>
                <arguments xsi:type="valueOfIdentifier">
                    <variableName>to</variableName>
                </arguments>
            </FunctionBox>
            <FunctionBox>
                <function xsi:type="ok"/>
            </FunctionBox>
        </decisionBox>
        <inputVariables>
            <name>fromNode</name>
        </inputVariables>
        <inputVariables>
            <name>toNode</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <questionId>Question-3454406021292330343096</questionId>
        <questionText>7. Give your third chosen edge.</questionText>
        <script>// No script
from = Retrieve("events/findDistance[seqnr= 5]/distance");
to = Retrieve("events/findDistance[seqnr= 6]/distance");

Debug();
Check("($from = $fromNode) and ($to = $toNode) ");
Comment("The edge %s-%s  is the third chosen one with the weight 2.",from,to);


Ok();</script>
    </questionsList>
    <questionsList>
        <decisionBox xsi:type="scriptBox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <inputVariables>
                <name>a</name>
                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"></value>
            </inputVariables>
            <next xsi:type="assignBox">
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="assignBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <function xsi:type="ok"/>
                                    <arguments xsi:type="valueOfIdentifier">
                                        <variableName>total</variableName>
                                    </arguments>
                                    <arguments xsi:type="valueOfIdentifier">
                                        <variableName>x</variableName>
                                    </arguments>
                                </next>
                                <function xsi:type="debug"/>
                            </next>
                            <variableName>total</variableName>
                            <expression xsi:type="functionBox">
                                <function xsi:type="retrieve"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">$d1+$d2+$d3</value>
                                </arguments>
                            </expression>
                        </next>
                        <variableName>d3</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/weight</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>d2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/weight</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>d1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/weight</value>
                    </arguments>
                </expression>
            </next>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="assignBox">
                            <next xsi:type="functionBox">
                                <next xsi:type="functionBox">
                                    <function xsi:type="ok"/>
                                    <arguments xsi:type="valueOfIdentifier">
                                        <variableName>total</variableName>
                                    </arguments>
                                    <arguments xsi:type="valueOfIdentifier">
                                        <variableName>x</variableName>
                                    </arguments>
                                </next>
                                <function xsi:type="debug"/>
                            </next>
                            <variableName>total</variableName>
                            <expression xsi:type="functionBox">
                                <function xsi:type="retrieve"/>
                                <arguments xsi:type="constantValue">
                                    <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">$d1+$d2+$d3</value>
                                </arguments>
                            </expression>
                        </next>
                        <variableName>d3</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/weight</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>d2</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/weight</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>d1</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 1]/weight</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="assignBox">
                        <next xsi:type="functionBox">
                            <next xsi:type="functionBox">
                                <function xsi:type="ok"/>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>total</variableName>
                                </arguments>
                                <arguments xsi:type="valueOfIdentifier">
                                    <variableName>x</variableName>
                                </arguments>
                            </next>
                            <function xsi:type="debug"/>
                        </next>
                        <variableName>total</variableName>
                        <expression xsi:type="functionBox">
                            <function xsi:type="retrieve"/>
                            <arguments xsi:type="constantValue">
                                <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">$d1+$d2+$d3</value>
                            </arguments>
                        </expression>
                    </next>
                    <variableName>d3</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/weight</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>d2</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 2]/weight</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="assignBox">
                    <next xsi:type="functionBox">
                        <next xsi:type="functionBox">
                            <function xsi:type="ok"/>
                            <arguments xsi:type="valueOfIdentifier">
                                <variableName>total</variableName>
                            </arguments>
                            <arguments xsi:type="valueOfIdentifier">
                                <variableName>x</variableName>
                            </arguments>
                        </next>
                        <function xsi:type="debug"/>
                    </next>
                    <variableName>total</variableName>
                    <expression xsi:type="functionBox">
                        <function xsi:type="retrieve"/>
                        <arguments xsi:type="constantValue">
                            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">$d1+$d2+$d3</value>
                        </arguments>
                    </expression>
                </next>
                <variableName>d3</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">events/sortedEdges[seqnr= 3]/weight</value>
                    </arguments>
                </expression>
            </AssignBox>
            <AssignBox>
                <next xsi:type="functionBox">
                    <next xsi:type="functionBox">
                        <function xsi:type="ok"/>
                        <arguments xsi:type="valueOfIdentifier">
                            <variableName>total</variableName>
                        </arguments>
                        <arguments xsi:type="valueOfIdentifier">
                            <variableName>x</variableName>
                        </arguments>
                    </next>
                    <function xsi:type="debug"/>
                </next>
                <variableName>total</variableName>
                <expression xsi:type="functionBox">
                    <function xsi:type="retrieve"/>
                    <arguments xsi:type="constantValue">
                        <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">$d1+$d2+$d3</value>
                    </arguments>
                </expression>
            </AssignBox>
            <FunctionBox>
                <next xsi:type="functionBox">
                    <function xsi:type="ok"/>
                    <arguments xsi:type="valueOfIdentifier">
                        <variableName>total</variableName>
                    </arguments>
                    <arguments xsi:type="valueOfIdentifier">
                        <variableName>x</variableName>
                    </arguments>
                </next>
                <function xsi:type="debug"/>
            </FunctionBox>
            <FunctionBox>
                <function xsi:type="ok"/>
                <arguments xsi:type="valueOfIdentifier">
                    <variableName>total</variableName>
                </arguments>
                <arguments xsi:type="valueOfIdentifier">
                    <variableName>x</variableName>
                </arguments>
            </FunctionBox>
        </decisionBox>
        <inputVariables>
            <name>a</name>
            <value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></value>
        </inputVariables>
        <questionId>Question-3454406021292331019639</questionId>
        <questionText>8. Give the total weight of your MST.</questionText>
        <script>// No script
d1 = Retrieve("events/sortedEdges[seqnr= 1]/weight");
d2 = Retrieve("events/sortedEdges[seqnr= 2]/weight");
d3 = Retrieve("events/sortedEdges[seqnr= 3]/weight");
total = Retrieve("$d1+$d2+$d3");
Debug();

Ok(total,x);</script>
    </questionsList>
    <subTitle>Output  Language: Java
Author: Xiaofan Fan</subTitle>
    <title>Kruskal's algorithm</title>
</ns2:exercise>
