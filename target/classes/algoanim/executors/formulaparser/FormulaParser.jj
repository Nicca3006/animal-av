/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./FormulaParser.jj */
/*@egen*/options {
	           
	                       
	STATIC=false;
	               
	                      
}

PARSER_BEGIN( FormulaParser )
package algoanim.executors.formulaparser;
public class FormulaParser/*@bgen(jjtree)*/implements FormulaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTFormulaParserState jjtree = new JJTFormulaParserState();

/*@egen*/}
PARSER_END( FormulaParser )

SKIP : { " " | "\t" | "\n" | "\r" }


TOKEN : { <MULT  : "*" > }
TOKEN : { <DIV  : "/" > }
TOKEN : { <PLUS  : "+" > }
TOKEN : { <MINUS : "-" > }

TOKEN : { <IDENTIFIER: ["a"-"z","A"-"Z"](["0"-"9","a"-"z","A"-"Z"])* > }
TOKEN : { <NUMBER: (["0"-"9"])+ ( "." (["0"-"9"])+ )? > }

SimpleNode query()	     	: {/*@bgen(jjtree) Root */
  Root jjtn000 = new Root(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Root */
                                       try {
/*@egen*/ ( plusExpr() )? <EOF>/*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
                                                             }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/ }
void plusExpr()				: {} { minusExpr() ( <PLUS>/*@bgen(jjtree) #Plus( 2) */
                                                                    {
                                                                      Plus jjtn001 = new Plus(this, JJTPLUS);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
                                                                    }
                                                                    try {
/*@egen*/ minusExpr()/*@bgen(jjtree)*/
                                                                    } catch (Throwable jjte001) {
                                                                      if (jjtc001) {
                                                                        jjtree.clearNodeScope(jjtn001);
                                                                        jjtc001 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte001 instanceof RuntimeException) {
                                                                        throw (RuntimeException)jjte001;
                                                                      }
                                                                      if (jjte001 instanceof ParseException) {
                                                                        throw (ParseException)jjte001;
                                                                      }
                                                                      throw (Error)jjte001;
                                                                    } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                      }
                                                                    }
/*@egen*/          )* }
void minusExpr()			: {} { multExpr() ( <MINUS>/*@bgen(jjtree) #Minus( 2) */
                                                                    {
                                                                      Minus jjtn001 = new Minus(this, JJTMINUS);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
                                                                    }
                                                                    try {
/*@egen*/ multExpr()/*@bgen(jjtree)*/
                                                                    } catch (Throwable jjte001) {
                                                                      if (jjtc001) {
                                                                        jjtree.clearNodeScope(jjtn001);
                                                                        jjtc001 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte001 instanceof RuntimeException) {
                                                                        throw (RuntimeException)jjte001;
                                                                      }
                                                                      if (jjte001 instanceof ParseException) {
                                                                        throw (ParseException)jjte001;
                                                                      }
                                                                      throw (Error)jjte001;
                                                                    } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                      }
                                                                    }
/*@egen*/           )* }
void multExpr()				: {} { divExpr() ( <MULT>/*@bgen(jjtree) #Mult( 2) */
                                                                  {
                                                                    Mult jjtn001 = new Mult(this, JJTMULT);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
                                                                  }
                                                                  try {
/*@egen*/ divExpr()/*@bgen(jjtree)*/
                                                                  } catch (Throwable jjte001) {
                                                                    if (jjtc001) {
                                                                      jjtree.clearNodeScope(jjtn001);
                                                                      jjtc001 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte001 instanceof RuntimeException) {
                                                                      throw (RuntimeException)jjte001;
                                                                    }
                                                                    if (jjte001 instanceof ParseException) {
                                                                      throw (ParseException)jjte001;
                                                                    }
                                                                    throw (Error)jjte001;
                                                                  } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                    }
                                                                  }
/*@egen*/          )* }
void divExpr()				: {} { terminal() ( <DIV>/*@bgen(jjtree) #Div( 2) */
                                                                  {
                                                                    Div jjtn001 = new Div(this, JJTDIV);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
                                                                  }
                                                                  try {
/*@egen*/ terminal()/*@bgen(jjtree)*/
                                                                  } catch (Throwable jjte001) {
                                                                    if (jjtc001) {
                                                                      jjtree.clearNodeScope(jjtn001);
                                                                      jjtc001 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte001 instanceof RuntimeException) {
                                                                      throw (RuntimeException)jjte001;
                                                                    }
                                                                    if (jjte001 instanceof ParseException) {
                                                                      throw (ParseException)jjte001;
                                                                    }
                                                                    throw (Error)jjte001;
                                                                  } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                    }
                                                                  }
/*@egen*/         )* }
void klammer()				: {} { "(" plusExpr() ")" }

void terminal()					: {} { number() | identifier() | klammer() }
void number()		       		: {/*@bgen(jjtree) Number */
                                            Number jjtn000 = new Number(this, JJTNUMBER);
                                            boolean jjtc000 = true;
                                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) Number */
                                                         try {
/*@egen*/ t=<NUMBER>/*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                      jjtc000 = false;
                                                                    }
/*@egen*/ { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc000) {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                           }
                                                         }
/*@egen*/ }
void identifier()	           	: {/*@bgen(jjtree) Identifier */
                                            Identifier jjtn000 = new Identifier(this, JJTIDENTIFIER);
                                            boolean jjtc000 = true;
                                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) Identifier */
                                                         try {
/*@egen*/ t=<IDENTIFIER>/*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                        }
/*@egen*/ { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc000) {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                           }
                                                         }
/*@egen*/ }
